#!/usr/bin/env python
# pylint: disable=invalid-name
import sys
sys.path.append('/opt/palette')

import os
import pexpect
import socket
import time
import argparse

from datetime import datetime

from akiri.framework.sqlalchemy import get_session

from support import Support
from utils import set_verbosity, verbose, fatal

USER = 'palette'

def connect(session, entry):

    entry.active = True
    session.commit()

    port = entry.port
    cmd = 'ssh -p ' + str(port) + ' ' + USER + '@localhost'
    verbose(cmd)

    while True:
        try:
            s = socket.create_connection(('localhost', port))
        except socket.error:
            verbose(str(datetime.now()))
            s = None
        if s is None:
            time.sleep(1)
            continue
        break

    child = pexpect.spawn(cmd)

    # hold the socket open until the *real* ssh client connects...
    time.sleep(0.5)
    s.close()

    child.interact()
    child.close()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='store_true', default=False)
    parser.add_argument('name', nargs=1)
    parser_args = parser.parse_args()
    name = parser_args.name[0]
    set_verbosity(parser_args.verbose)

    data = {'__name__': ''}
    if os.path.exists('application.wsgi'):
        execfile('application.wsgi', data)
    elif os.path.exists('/opt/palette/application.wsgi'):
        execfile('/opt/palette/application.wsgi', data)
    else:
        print >> sys.stderr, "application.wsgi: file not found"
        sys.exit(1)

    session = get_session()
    entry = Support.get_by_name(name)
    if entry is None:
        fatal("'%s' was not found in table.", name)

    try:
        connect(session, entry)
    finally:
        entry.active = False
        session.commit()

if __name__ == '__main__':
    main()
