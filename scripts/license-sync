#!/usr/bin/env python
# pylint: disable=invalid-name
import sys
sys.path.append('/opt/palette')

from akiri.framework.sqlalchemy import create_engine

from licensing import License
from salesforce_api import SalesforceAPI

DATABASE = 'postgresql://palette:palpass@localhost/licensedb'
create_engine(DATABASE, echo=False, pool_size=20, max_overflow=30)

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("name")
    args = parser.parse_args()

    entry = License.get_by_name(args.name)
    if not entry:
        print >> sys.stderr, "Entry not found: " + args.name
        sys.exit(1)

    if entry.salesforceid is None:
        print >> sys.stderr, "The salesforce id of this entry is NULL"
        sys.exit(2)

    print entry.salesforceid

    data = {'StageName': entry.stage.name,
            'Expiration_Date__c': str(entry.expiration_time.date())}

    if not entry.type is None:
        data['Tableau_App_License_Type__c'] = entry.type
    if not entry.n is None:
        data['Tableau_App_License_Count__c'] = entry.n
    if not entry.license_start_time is None:
        # FIXME: save this date representation
        data['License_Start_Date_Time__c'] = \
                        entry.registration_start_time.strftime('%Y-%m-%dT%XZ')
    if not entry.hosting_type is None:
        data['Hosting_Type__c'] = entry.hosting_type

    print data
    print

    # pylint: disable=protected-access
    conn = SalesforceAPI._get_connection()

    # FIXME: merge with update_opportunity
    conn.Opportunity.update(entry.salesforceid, data)

    opportunity = conn.Opportunity.get(entry.salesforceid)

    for key in opportunity:
        print "{0:40} {1}".format(key, opportunity[key])
