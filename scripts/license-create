#!/usr/bin/env python
# pylint: disable=invalid-name
import sys
sys.path.append('/opt/palette')

import logging
from datetime import datetime

from akiri.framework.sqlalchemy import create_engine

from contact import Email
from utils import time_from_today
from license_manager import LicenseManager
from ansible_api import AnsibleAPI
from salesforce_api import SalesforceAPI

DATABASE = 'postgresql://palette:palpass@localhost/licensedb'

database = DATABASE
create_engine(database, echo=False, pool_size=20, max_overflow=30)

# Setup logging
logger = logging.getLogger('licensing')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = logging.Formatter(\
                    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--fullname',
        help='Set the fullname for the license. Has to be "Firstname Lastname',
        required=True)
    parser.add_argument('--name',
        help='Sets the unique license name',
        required=True)
    parser.add_argument('--email',
        help='Sets the email address for the license',
        required=True)
    parser.add_argument('--stage',
        help='Sets the stage. If not specified uses STAGE-TRIAL-REQUESTED',
        required=False,
        choices=['STAGE-TRIAL-REQUESTED',
                 'STAGE-TRIAL-REGISTERED',
                 'STAGE-VERIFIED',
                 'STAGE-CLOSED-WON'])
    parser.add_argument('--expires',
        help='Sets expiration date. Has to be in the format MM/DD/YY',
        required=False)
    parser.add_argument('--product',
        help='Sets the Product',
        required=True,
        choices=['PALETTE-PRO', 'PALETTE-ENT'])
    parser.add_argument('--send_email',
        help='Send an email to the user. '
             'If not specified no email will be sent',
        required=False,
        action='store_true')
    parser.add_argument('--launch',
        help='Launch an instance. If not specified no instance is launched',
        required=False,
        action='store_true')
    parser.set_defaults(send_email=False, launch=False)
    args = parser.parse_args()

    parts = args.fullname.split(' ')
    fn = parts[0]
    ln = parts[1]
    email = Email(args.email)

    if args.product == 'PALETTE-PRO':
        mailid = 'SENDWITHUS-TRIAL-REQUESTED-PRO-ID'
    else:
        mailid = 'SENDWITHUS-TRIAL-REQUESTED-ENT-ID'

    if args.expires is not None:
        expiration = datetime.strptime(args.expires, '%x')
    else:
        expiration = time_from_today(months=1)

    if args.stage is not None:
        stage = args.stage
    else:
        stage = 'STAGE-TRIAL-REQUESTED'

    # FIXME: create if needed.
    sf = SalesforceAPI.connect()
    contact = sf.get_contact_by_email(email.base)
    if contact is None:
        # FIXME
        raise Exception("contact doesn't exist yet")

    # FIXME: remove new_license
    entry = LicenseManager.new_license(args.name, contact=contact,
                                       product=args.product,
                                       stage=stage,
                                       expiration=expiration,
                                       mailid=mailid,
                                       send_email=args.send_email)
    if entry is None:
        sys.exit(1)

    if args.product == 'PALETTE-PRO' and args.launch:
        AnsibleAPI.launch_instance(entry, contact,
                                  'PALETTECLOUD-LAUNCH-SUCCESS-ID',
                                  'PALETTECLOUD-LAUNCH-FAIL-ID')

    sys.exit(0)
