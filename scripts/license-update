#!/usr/bin/env python
# pylint: disable=invalid-name
import sys
sys.path.append('/opt/palette')

from datetime import datetime
import logging

from akiri.framework.sqlalchemy import create_engine

from license_manager import LicenseManager

DATABASE = 'postgresql://palette:palpass@localhost/licensedb'

# pylint: disable=invalid-name
database = DATABASE
create_engine(database, echo=False, pool_size=20, max_overflow=30)

# Setup logging
logger = logging.getLogger('licensing')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = logging.Formatter(\
                    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--key', required=False)
    parser.add_argument('--name', required=False)
    parser.add_argument('--fullname', required=False)
    parser.add_argument('--email', required=False)
    parser.add_argument('--website', required=False)
    parser.add_argument('--subdomain', required=False)
    parser.add_argument('--expiration_time', required=False)
    parser.add_argument('--stageid', required=False)
    args = parser.parse_args()

    if args.key is None and args.name is None:
        print 'You must specify either --key or --name parameters'
        sys.exit(1)

    data = {}
    if args.fullname is not None:
        parts = args.fullname.split(' ')
        fn = parts[0]
        ln = ' '.join(parts[1:])

        if fn is not None:
            data['firstname'] = fn

        if ln is not None:
            data['lastname'] = ln

    if args.email is not None:
        data['email'] = args.email

    if args.name is not None:
        data['name'] = args.name

    if args.key is not None:
        data['key'] = args.key

    if args.website is not None:
        data['website'] = args.website

    if args.expiration_time is not None:
        fmt = '%Y-%m-%d %H:%M:%S %Z'
        data['expiration_time'] = datetime.strptime(args.expiration_time, fmt)

    if args.stageid is not None:
        data['stageid'] = args.stageid

    LicenseManager.update_license(data)
